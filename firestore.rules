/**
 * @fileoverview Firestore Security Rules for MindView Canvas.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all user-specific data (profiles, mindmaps, test results, incorrect questions).
 * Tests are publicly readable but not writable by clients.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the user can read/write their own profile.
 * - /users/{userId}/mindmaps/{mindmapId}: Stores mind maps owned by the user. Only the user can read/write their own mindmaps.
 * - /tests/{testId}: Stores tests available in the application. Publicly readable, but only server-side code can create/update/delete.
 * - /users/{userId}/testResults/{testResultId}: Stores test results for a user. Only the user can read/write their own test results.
 * - /users/{userId}/incorrectQuestions/{incorrectQuestionId}: Stores incorrect questions for a user. Only the user can read/write their own incorrect questions.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Data validation is relaxed for prototyping, focusing on ownership and relational integrity checks.
 * - Tests are publicly readable to allow any user to view the available tests, but write access is not granted in these rules, which implies that backend/admin handles test creation.
 *
 * Denormalization for Authorization:
 * - The 'userId' is denormalized into every subcollection belonging to the User, it's used for simple, performant ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile if authenticated as 'user123'.
     * @allow (get, update, delete) - User with ID 'user123' can get, update, and delete their profile if authenticated as 'user123'.
     * @deny (create) - User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get, update, delete) - User with ID 'user456' cannot get, update, or delete the profile for 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure mind maps. Only the owning user can manage their mind maps.
     * @path /users/{userId}/mindmaps/{mindmapId}
     * @allow (create) - User 'user123' can create a new mindmap under their user ID.
     * @allow (get, list, update, delete) - User 'user123' can read, list, update, and delete mindmaps under their user ID.
     * @deny (create) - User 'user456' cannot create a mindmap under 'user123'.
     * @deny (update, delete) - User 'user456' cannot update or delete mindmaps under 'user123'.
     * @principle Enforces user-based ownership for mind map data.
     */
    match /users/{userId}/mindmaps/{mindmapId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Tests are publicly readable but not writable via the client.
     * @path /tests/{testId}
     * @allow (get, list) - Any user can read the test details.
     * @deny (create, update, delete) - Clients cannot create, update, or delete tests.
     * @principle Allows public access to test information but restricts write access to prevent unauthorized modification.
     */
    match /tests/{testId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secure user test results. Only the owning user can manage their test results.
     * @path /users/{userId}/testResults/{testResultId}
     * @allow (create) - User 'user123' can create a new testResult under their user ID.
     * @allow (get, list, update, delete) - User 'user123' can read, list, update, and delete testResults under their user ID.
     * @deny (create) - User 'user456' cannot create a testResult under 'user123'.
     * @deny (update, delete) - User 'user456' cannot update or delete testResults under 'user123'.
     * @principle Enforces user-based ownership for testResult data.
     */
    match /users/{userId}/testResults/{testResultId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure incorrect questions. Only the owning user can manage their incorrect questions.
     * @path /users/{userId}/incorrectQuestions/{incorrectQuestionId}
     * @allow (create) - User 'user123' can create a new incorrectQuestion under their user ID.
     * @allow (get, list, update, delete) - User 'user123' can read, list, update, and delete incorrectQuestions under their user ID.
     * @deny (create) - User 'user456' cannot create a incorrectQuestion under 'user123'.
     * @deny (update, delete) - User 'user456' cannot update or delete incorrectQuestions under 'user123'.
     * @principle Enforces user-based ownership for incorrectQuestion data.
     */
    match /users/{userId}/incorrectQuestions/{incorrectQuestionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

    function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}